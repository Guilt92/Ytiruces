#!/bin/bash

# Author:   OuTiS

ORANGE=$(echo -ne '\e[38;5;214m')  
BLUE=$(echo -ne '\e[94m')           
RED=$(echo -ne '\e[31m')            
GREEN=$(echo -ne '\e[32m')          
ENDCOLOR=$(echo -ne '\e[0m')        
YELLOW=$(echo -ne '\033[0;33m')     
CYAN=$(echo -ne '\e[36m')           
MAGENTA=$(echo -ne '\e[35m')        
PURPLE=$(echo -ne '\e[38;5;129m')   
WHITE=$(echo -ne '\e[97m') 


check_user_root(){
    if [ "$EUID" -ne 0 ]; then 
        echo -e ""
        echo -e "${RED}This script must be run as root. Please switch to the root user and try again.${ENDCOLOR}"
        exit 1
    fi
}
clear
check_user_root
sleep 1;

detect_distribution() {
    if [ -f /etc/os-release ]; then
        source /etc/os-release
        if [[ "${ID}" = "ubuntu" ]]; then
            echo "${BLUE}Ok OS. Installing...${ENDCOLOR}"
            return 0
        fi
        echo "${RED}Unsupported OS. Please install Ubuntu :)${ENDCOLOR}"
        exit 255
    fi
    echo "${RED}Failed to detect OS version file /etc/os-release.${ENDCOLOR}"
    exit 1
}
clear 
detect_distribution
sleep 2;
clear


service_nftables() {
    echo -e "${YELLOW}Checking status of nftables service...${ENDCOLOR}"
    
    if systemctl is-active --quiet nftables; then
        echo -e "${GREEN}Service \"nftables\" is already active and running.${ENDCOLOR}"
        echo -e "${YELLOW}Restarting nftables to ensure configuration is loaded...${ENDCOLOR}"
        
        if systemctl restart nftables; then
            echo -e "${GREEN}Service \"nftables\" restarted successfully.${ENDCOLOR}"
        else
            echo -e "${RED}Failed to restart service \"nftables\".${ENDCOLOR}"
            return 1
        fi
    else
        echo -e "${RED}Service \"nftables\" is not running. Attempting to start it...${ENDCOLOR}"
        
        if systemctl start nftables; then
            echo -e "${GREEN}Service \"nftables\" started successfully.${ENDCOLOR}"
            
            if systemctl enable nftables; then
                echo -e "${GREEN}Service \"nftables\" enabled to start on boot.${ENDCOLOR}"
            else
                echo -e "${RED}Failed to enable service \"nftables\". It might not start on boot.${ENDCOLOR}"
                return 1
            fi
        else
            echo -e "${RED}Failed to start service \"nftables\". Please check logs with: journalctl -xeu nftables${ENDCOLOR}"
            return 1
        fi
    fi
    
    echo -e "${YELLOW}Verifying nftables configuration...${ENDCOLOR}"
    
    if nft list ruleset > /dev/null 2>&1; then
        echo -e "${GREEN}nftables configuration is valid.${ENDCOLOR}"
    else
        echo -e "${RED}Error in nftables configuration.${ENDCOLOR}"
        return 1
    fi
    
    echo -e "${GREEN}Service \"nftables\" management completed successfully.${ENDCOLOR}"
    return 0
}

pkg_install(){
    pkg=nftables
    status="$(dpkg-query -W --showformat='${db:Status-Status}' "$pkg" 2>&1)"
    if [ ! $? = 0 ] || [ ! "$status" = installed ]; then
        apt install $pkg -y
    fi
}

add_ip_withlist(){
    echo -e "${YELLOW}Please enter the IP address you want to whitelist.${ENDCOLOR}"
    echo -e "${YELLOW}Note: This should be the same IP address you are using to SSH into the server.${ENDCOLOR}"

    read -p "$(echo -e "${BLUE}Enter your IP address: ${ENDCOLOR}")" USER_IP
    echo -e "${GREEN}User IP entered: $USER_IP ${ENDCOLOR}"


    if [[ -z "$USER_IP" ]]; then
        echo -e "${RED}Error: No IP entered. Exiting...${ENDCOLOR}"
        exit 1
    fi

    if [[ ! $USER_IP =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        echo -e "${RED}The entered IP address is not valid. Please try again.${ENDCOLOR}"
        exit 1
    else
        IFS='.' read -r -a octets <<< "$USER_IP"
        for octet in "${octets[@]}"; do
            if ((octet < 0 || octet > 255)); then
                echo -e "${RED}The entered IP address is not valid. Please try again.${ENDCOLOR}"
                exit 1
            fi
        done
    fi

    nftwizard
    echo -e "${YELLOW}You entered IP: ${GREEN}$USER_IP${ENDCOLOR}"
    echo -e "${YELLOW}Please ensure this is the IP you used to SSH into the server.${ENDCOLOR}"
    
    nft list tables | grep -q 'inet raw' || nft add table inet raw || { echo -e "${RED}Failed to add table raw. Exiting...${ENDCOLOR}"; exit 1; }
    nft list set inet raw whitelist_set 2>/dev/null || nft add set inet raw whitelist_set { type ipv4_addr\; flags timeout\;} || { echo -e "${RED}Failed to add set whitelist_set. Exiting...${ENDCOLOR}"; exit 1; }

    SSH_PORT=$(grep -E '^Port ' /etc/ssh/sshd_config | awk '{print $2}')
    SSH_PORT=${SSH_PORT:-22}

    nft add rule inet filter input ct state new,established tcp dport $SSH_PORT accept
    nft add rule inet filter output ct state established tcp sport $SSH_PORT accept
    nft add rule inet filter input ct state new,established tcp dport {80, 443, 53} accept
    nft add rule inet filter input ct state new,established udp dport {53} accept

    export USER_IP
    export SSH_PORT

    echo -e "${GREEN}Adding IP address $USER_IP to the whitelist...${ENDCOLOR}"
    nft delete element inet filter blacklist_set { $USER_IP } 2>/dev/null
    nft add element inet raw whitelist_set { $USER_IP } 2>/dev/null

}

add_ip_block_list(){
    echo -e "${YELLOW}Please enter the IP address you want to block.${ENDCOLOR}"
    read -p "$(echo -e "${BLUE}Enter the IP address to block: ${ENDCOLOR}")" USER_IP
    if [[ -z "$USER_IP" ]]; then
        echo -e "${RED} No Ip Entered. EXiting ....  ${ENDCOLOR}"
        exit 1
    fi
    if [[ ! $USER_IP =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        echo -e "${RED}The entered IP address is not valid. Please try again.${ENDCOLOR}"
        exit 1
    else
        IFS='.' read -r -a octets <<< "$USER_IP"
        for octet in "${octets[@]}"; do
            if ((octet < 0 || octet > 255)); then
                echo -e "${RED}The entered IP address is not valid. Please try again.${ENDCOLOR}"
                exit 1
            fi
        done
    fi
    echo -e "${YELLOW}You entered IP: ${GREEN}$USER_IP${ENDCOLOR}"
    echo -e "${RED}Blocking this IP address...${ENDCOLOR}"
    nft list tables | grep -q 'inet filter' || nft add table inet filter 2>/dev/null 
    nft list set inet filter blacklist_set 2>/dev/null || nft add set inet filter blacklist_set { type ipv4_addr\; flags timeout\; } 2>/dev/null
    nft list chain inet filter input 2>/dev/null || nft add chain inet filter input { type filter hook input priority 0\; } 2>/dev/null 
    nft add rule inet filter input ip saddr @blacklist_set drop 2>/dev/null 

    echo -e "${GREEN}Adding IP address $USER_IP to the block list...${ENDCOLOR}"
    nft add element inet filter blacklist_set { $USER_IP }    2>/dev/null

}

display_rules(){
    clear 
    echo -e "${RED}\e[5mDisplay Rules. Clear Page After 5 Time...${ENDCOLOR}"
    echo "${GREEN}Current nftables Rules: ${ENDCOLOR}" 
     nft list ruleset
     sleep 5 
}

backup_conf_nft(){
config_file="/etc/nftables.conf"

if [ -f "$config_file" ]; then
    echo -e "${GREEN}Config file exists: $config_file${ENDCOLOR}"
    
    timestamp=$(date +%Y%m%d%H%M%S)
    backup_file="/etc/nftables.conf-backup-$timestamp"
    
    cp "$config_file" "$backup_file"
    echo -e "${GREEN}Backup created at: $backup_file${ENDCOLOR}"
else
    echo -e "${RED}Config file does not exist: $config_file${ENDCOLOR}"
fi

}

nftwizard(){
    backup_conf_nft
    nft list tables | grep -q 'inet filter' || nft add table inet filter 2>/dev/null
    nft add chain inet filter input { type filter hook input priority 0 \; } 2>/dev/null
    nft add chain inet filter output { type filter hook output priority 0 \; } 2>/dev/null
    nft add chain inet filter forward { type filter hook forward priority 0 \; } 2>/dev/null
  
    nft list tables | grep -q 'inet nat' || nft add table inet nat 2>/dev/null
    nft add chain inet nat prerouting { type nat hook prerouting priority 0\; } 2>/dev/null
    nft add chain inet nat postrouting { type nat hook postrouting priority 100\; } 2>/dev/null

    nft list tables | grep -q 'inet raw' || nft add table inet raw 2>/dev/null
    nft add chain inet raw prerouting { type filter hook prerouting priority -500\; } 2>/dev/null
    nft add chain inet raw output { type filter hook output priority -500\; } 2>/dev/null 

    nft list tables | grep -q 'inet mangle' || nft add table inet mangle 2>/dev/null 
    nft add chain inet mangle prerouting { type filter hook prerouting priority -150\; } 2>/dev/null
    nft add chain inet mangle postrouting { type filter hook postrouting priority -150\; } 2>/dev/null

  echo -e "${GREEN}All chains & table successfully created!${ENDCOLOR}"
}


add_rule(){
    read -p "${BLUE}Enter Chain (INPUT / OUTPUT / FORWARD): ${ENDCOLOR}" chain
    read -p "${BLUE}Enter protocol (tcp/udp/icmp): ${ENDCOLOR} " protocol
    read -p "${BLUE}Enter source IP (or 0.0.0.0/0 for any): ${ENDCOLOR} " source
    read -p "${BLUE}Enter destination IP (or 0.0.0.0/0 for any): ${ENDCOLOR} " destination
    read -p "${BLUE}Enter destination port (or leave empty for none): ${ENDCOLOR} " port
    read -p "${BLUE}Enter action (ACCEPT/DROP): ${ENDCOLOR} " action

    if [ -z "$port" ]; then
         nft add rule ip filter $chain ip saddr $source daddr $destination $protocol $action 
    else
         nft add rule ip filter $chain ip saddr $source daddr $destination $protocol dport $port $action
    fi
    echo -e "${GREEN}Rule added successfully!${ENDCOLOR}"
}


add_port_withlist() {
  read -p "${BLUE}Enter port: ${ENDCOLOR}" PORT

  if [[ ! $PORT =~ ^[0-9]+$ || $PORT -lt 1 || $PORT -gt 65535 ]]; then
    echo -e "${RED}Invalid port number. Please enter a number between 1 and 65535.${ENDCOLOR}"
    return
  fi

  if [[ -z "$PORT" ]]; then
    echo -e "${RED}Error: No $PORT entered. Exiting...${ENDCOLOR}"
    exit 1
  fi
  nft insert rule inet filter input position 0 tcp dport $PORT  accept
  nft insert rule inet filter output position 0 tcp dport $PORT  accept
  echo -e "${GREEN}Port $PORT has been successfully added to the whitelist.${ENDCOLOR}"

}
block_port() {
  read -p "${BLUE}Enter port to block: ${ENDCOLOR}" PORT

  if [[ ! $PORT =~ ^[0-9]+$ || $PORT -lt 1 || $PORT -gt 65535 ]]; then
    echo -e "${RED}Invalid port number. Please enter a number between 1 and 65535.${ENDCOLOR}"
    return
  fi
   nft insert rule inet filter input position 0 tcp dport $PORT  drop
   nft insert rule inet filter output position 0 tcp dport $PORT  drop

   echo -e "${GREEN}Port $PORT has been successfully blocked.${ENDCOLOR}"
}
delete_rule() {
    echo ""
    display_rules
    echo ""
    read -p "${BLUE}Enter chain (input/output/forward): ${ENDCOLOR}" chain

    if [[ ! "$chain" =~ ^(input|output|forward)$ ]]; then
        echo -e "${RED}Invalid chain. Please choose 'input', 'output', or 'forward'.${ENDCOLOR}"
        return
    fi

    echo -e "${YELLOW}Displaying current rules in the $chain chain...${ENDCOLOR}"
    nft list chain inet filter $chain 2>/dev/null 

    read -p "${BLUE}Enter rule number to delete: ${ENDCOLOR}" rule_number

    nft delete rule inet filter $chain handle $rule_number || {
        echo -e "${RED}Failed to delete rule. Please make sure the rule number is correct.${ENDCOLOR}"
        return
    }

    echo -e "${GREEN}Rule deleted successfully!${ENDCOLOR}"
}
flush_all_rules() {
  BACKUP_FILE="/etc/nftables.conf.backup"
  nft list ruleset > $BACKUP_FILE || { echo -e "${RED}Failed to create backup.${ENDCOLOR}"; exit 1; }
  clear 
  sleep 1 
  read -p "${RED}Are You Sure You Want To Flush All Rules? (y/n): ${ENDCOLOR}" confirm
  if [[ "$confirm" == "y" ]]; then
    
    SSH_PORT=$(grep -E '^Port ' /etc/ssh/sshd_config | awk '{print $2}')
    SSH_PORT=${SSH_PORT:-22}
    
    nft flush ruleset
    echo -e "${YELLOW}All rules flushed.${ENDCOLOR}" 
    nft delete table inet whitelist 2>/dev/null
    nft delete table inet blacklist 2>/dev/null
    nftwizard
    nft add rule inet filter input ip saddr 0.0.0.0/0 tcp dport $SSH_PORT ct state new,established accept
    nft add rule inet filter output ip daddr 0.0.0.0/0 tcp sport $SSH_PORT ct state established accept
    nft add rule inet filter input ip saddr 0.0.0.0/0 tcp dport {80, 443, 53} ct state new,established accept
    nft add rule inet filter input ip saddr 0.0.0.0/0 udp dport {53} ct state new,established accept


    echo -e "${GREEN}All rules flushed, but SSH connection preserved!${ENDCOLOR}"
  else
    echo -e "${RED}Operation cancelled.${ENDCOLOR}"
  fi
}

load_conf_nftable() {
    read -p "${BLUE}Enter file name to load rules from: ${ENDCOLOR}" filename
    if [[ -f $filename ]]; then
         nft -f $filename
        echo -e "${GREEN}Rules loaded from $filename${ENDCOLOR}"
    else
        echo -e "${RED}File not found!${ENDCOLOR}"
    fi
}
ddos(){

    nft list table inet raw >/dev/null 2>&1 || nft add table inet raw 2>/dev/null
    nft add set inet raw blacklist { type ipv4_addr\; flags timeout\; timeout 12h\; } 2>/dev/null
    nft list chain inet raw prerouting >/dev/null 2>&1 || nft add chain inet raw prerouting { type filter hook prerouting priority -500 \; } 2>/dev/null
    nft list chain inet raw input >/dev/null 2>&1 || nft add chain inet raw input { type filter hook input priority -500 \; } 2>/dev/null
    nft list chain inet raw output >/dev/null 2>&1 || nft add chain inet raw output { type filter hook output priority -500 \; } 2>/dev/null
    nft insert rule inet raw prerouting ip saddr @whitelist_set accept 2>/dev/null 
    nft add rule inet raw prerouting ip protocol tcp tcp flags syn limit rate over 30/minute ip saddr != @whitelist_set add @blacklist { ip saddr } 2>/dev/null
    nft add rule inet raw prerouting ip protocol udp limit rate over 30/minute ip saddr != @whitelist_set add @blacklist { ip saddr } 2>/dev/null
    nft add rule inet raw prerouting ip protocol icmp limit rate over 30/minute ip saddr != @whitelist_set add @blacklist { ip saddr } 2>/dev/null
    nft add rule inet raw prerouting ip protocol tcp ct state new limit rate over 50/minute ip saddr != @whitelist_set add @blacklist { ip saddr } 2>/dev/null
    nft add rule inet raw prerouting ip saddr @blacklist drop 2>/dev/null
    nft list ruleset > /etc/nftables.conf
    }   


reload_nft() {
    echo -e "${YELLOW}Reloading nftables rules...${ENDCOLOR}"
    if systemctl reload nftables; then
        echo -e "${GREEN}NFTables rules reloaded successfully.${ENDCOLOR}"
    else
        echo -e "${RED}Failed to reload NFTables rules. Please check your configuration.${ENDCOLOR}"
        exit 1
    fi
}

forwarding() {
    read -p "$(echo -e "${YELLOW}Enter the destination IP: ${ENDCOLOR}")" DEST_IP
    read -p "$(echo -e "${YELLOW}Enter the destination port (leave empty for any): ${ENDCOLOR}")" DEST_PORT
    read -p "$(echo -e "${YELLOW}Enter the source port (leave empty for any): ${ENDCOLOR}")" SRC_PORT

    if [ -z "$DEST_IP" ]; then
        echo -e "${RED}Destination IP is required.${ENDCOLOR}"
        return 1
    fi

    nft add table ip nat 2>/dev/null

    nft list chain ip nat prerouting >/dev/null 2>&1 || nft add chain ip nat prerouting { type nat hook prerouting priority -100 \; }
    nft list chain ip nat postrouting >/dev/null 2>&1 || nft add chain ip nat postrouting { type nat hook postrouting priority 100 \; }

    echo -e "${BLUE} Sysctl Config .... ${ENDCOLOR}"
    sleep 1 
    clear 
    sysctl -w net.ipv4.ip_forward=1 
    sysctl -p
    sleep 1 
    clear 
    if [ -z "$SRC_PORT" ] && [ -z "$DEST_PORT" ]; then
        nft add rule ip nat prerouting dnat to "$DEST_IP"
        nft add rule ip nat postrouting ip daddr "$DEST_IP" masquerade
        echo -e "${GREEN}All traffic forwarded to $DEST_IP successfully!${ENDCOLOR}"
    elif [ -z "$SRC_PORT" ]; then
        nft add rule ip nat prerouting tcp dport "$DEST_PORT" dnat to "$DEST_IP":"$DEST_PORT"
        nft add rule ip nat postrouting ip daddr "$DEST_IP" masquerade
        echo -e "${GREEN}All traffic to destination port $DEST_PORT forwarded to $DEST_IP:$DEST_PORT successfully!${ENDCOLOR}"
    elif [ -z "$DEST_PORT" ]; then
        nft add rule ip nat prerouting tcp dport "$SRC_PORT" dnat to "$DEST_IP"
        nft add rule ip nat postrouting ip daddr "$DEST_IP" masquerade
        echo -e "${GREEN}Traffic from source port $SRC_PORT forwarded to $DEST_IP successfully!${ENDCOLOR}"
    else
        nft add rule ip nat prerouting tcp dport "$SRC_PORT" dnat to "$DEST_IP":"$DEST_PORT"
        nft add rule ip nat postrouting ip daddr "$DEST_IP" masquerade
        echo -e "${GREEN}Traffic forwarded to $DEST_IP:$DEST_PORT from source port $SRC_PORT successfully!${ENDCOLOR}"
    fi
}

while true; do
    
    clear
    echo " "
    echo " "
    echo -e "${BLUE}\e[5m╔═══════════════════════════════════════════════════════════╗${ENDCOLOR}"
    echo -e "                    ${GREEN} 🔥 NFTables Manager 🔥   ${ENDCOLOR}"
    echo -e "              ${CYAN} https://github.com/Niihil/Ytiruces/  ${ENDCOLOR}"
    echo -e "${BLUE}\e[5m╚═══════════════════════════════════════════════════════════╝${ENDCOLOR}"
    echo " "
    echo -e  "${RED}============================ ${ENDCOLOR}"
    echo -e "" 
    echo -e "${RED}1. ${ENDCOLOR} Wizard Nftable${ENDCOLOR}"
    echo -e "${RED}2. ${ENDCOLOR} WithList Ip ${ENDCOLOR}"
    echo -e "${RED}3. ${ENDCOLOR} Block Ip${ENDCOLOR}"
    echo -e "${RED}4. ${ENDCOLOR} Display Rules${ENDCOLOR}"
    echo -e "${RED}5. ${ENDCOLOR} Add Rule${ENDCOLOR}"
    echo -e "${RED}6. ${ENDCOLOR} Delete Rule${ENDCOLOR}"
    echo -e "${RED}7. ${ENDCOLOR} Flush All Rules${ENDCOLOR}"
    echo -e "${RED}8. ${ENDCOLOR} Save Config File${ENDCOLOR}"
    echo -e "${RED}9. ${ENDCOLOR} DDOS Protection${ENDCOLOR}"
    echo -e "${RED}10.${ENDCOLOR} Open Port${ENDCOLOR}"
    echo -e "${RED}11.${ENDCOLOR} Block Port${ENDCOLOR}"
    echo -e "${RED}12.${ENDCOLOR} Load Conf File${ENDCOLOR}"
    echo -e "${RED}13.${ENDCOLOR} Forwarding${ENDCOLOR}"
    echo -e "${RED}14.${ENDCOLOR} Exit${ENDCOLOR}"
    echo -e " "
    echo -e  "${RED}============================ ${ENDCOLOR}" 
    echo -e " "
    read -p "$(echo -e "${BLUE}Please enter your choice: ${ENDCOLOR}")" choice
    case $choice in
        1)  pkg_install ; service_nftables ; sleep 1; clear; nftwizard; reload_nft ; continue ;;
        2)  add_ip_withlist; sleep 1; continue ;;        
        3)  add_ip_block_list; sleep 1 ; continue ;;
        4)  display_rules; continue ;;                                        
        5)  add_rule ; continue ;;                           
        6)  delete_rule ; continue ;;                        
        7)  flush_all_rules ; sleep 1 ; continue ;;              
        8)  backup_conf_nft; sleep 1; service_nftables; continue;;  
        9)  ddos; continue ;;                                                  
        10) add_port_withlist; sleep 1; reload_nft ; continue ;;              
        11) block_port; sleep 1; reload_nft ;continue ;;
        12)load_conf_nftable; sleep 1 ;reload_nft ; continue ;;
        13) forwarding ; sleep 1 ; continue ;;
        14) sleep 1; clear; echo "Exiting..."; exit ;;
        *) echo -e "${RED}Invalid option, please try again.${ENDCOLOR}" ;;
    esac

    sleep 1
done

